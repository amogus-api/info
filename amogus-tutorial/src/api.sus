include impostor.sus
set html_topbar_title High API

enum(2) ErrorCode {
    @> Email supplied to `sign_up()` is already in use <@
    email_in_use(0),
    @> Username supplied to `sign_up()` has already been taken <@
    username_taken(1),
    @> Email supplied to `log_in()` is not associated with an account <@
    invalid_email(2),
    @> Password supplied to `log_in()` is invalid <@
    invalid_password(3)
}

enum(1) State {
    @> The client is yet to log in <@
    awaiting_login(0)
}
set default_state awaiting_login

@> Creates a user account <@
globalmethod sign_up(0) {
    @> User's email address <@
    email: Str[match: /[^ @]@[^ @]/]; # please don't use this regex in production
    @> Desired username <@
    username: Str[match: /\w*/, len: 3..32];
    @> Desired password <@
    password: Str[len: 6..64];

    states { awaiting_login }
    errors { email_in_use, username_taken }
}

@> Logs in to an account for the rest of this session <@
globalmethod log_in(1) {
    @> User's email <@
    email: Str[match: /[^ @]@[^ @]/];
    @> User's password <@
    password: Str[len: 6..64];

    returns {
        @> User account associated with that email <@
        user: Int(8);
    }

    ratelimit 3 every 60s;
    states { awaiting_login }
    errors { invalid_email, invalid_password }
}

entity User(0) {
    id: Int(8);
    @> Username <@
    name: Str[match: /\w*/, len: 3..32];
    @> Avatar URL <@
    avatar: Str[match: /https?:\/\/.*\.(webp|png|jpe?g)/, len: 0..128];

    @> Report this user to the moderation team <@
    method report(0) {
        @> Reason for reporting <@
        reason: Str[len: 10+];

        ratelimit 1 every 1m;
        states { normal }
    }

    @> Get all articles published by this user <@
    method get_articles(1) {
        returns {
            @> List of all articles published by this user <@
            articles: List(Int(8), 1);
        }

        ratelimit 1 every 1s;
        states { normal }
    }
}

entity Article(1) {
    id: Int(8);
    @> Title <@
    title: Str[len: 5..140];
    @> Contents (formatted with Markdown) <@
    contents: opt(0) Str;
    @> Like counter <@
    likes: Int(3); # allows us to count up to ~16.7M likes

    @> Create an article <@
    staticmethod create(0) {
        @> Title <@
        title: Str[len: 5..140];
        @> Contents (formatted with Markdown) <@
        contents: Str;

        returns {
            @> Created article ID <@
            id: Int(8);
        }

        ratelimit 1 every 1m;
        states { normal }
    }

    @> Like an article <@
    method like(0) {
        ratelimit 2 every 10s;
        states { normal }
    }

    @> Gets all comments on an article <@
    method get_comments(1) {
        returns {
            @> All comments on an article <@
            comments: List(Int(8), 2);
        }

        ratelimit 1 every 1s;
        states { normal }
    }

    @> Posts a comment under an article <@
    method post_comment(2) {
        @> Contents <@
        text: Str[len: 1..280];

        ratelimit 2 every 10s;
        states { normal }
    }
}

entity Comment(2) {
    id: Int(8);
    @> Author <@
    author: Int(8);
    @> Contents <@
    text: Str[len: 1..280];

    @> Like a comment <@
    method like(0) {
        ratelimit 2 every 10s;
        states { normal }
    }
}
